{"designerVersion":"1.2.18","favorite":false,"id":"pbDataTable","name":"Data table","lastUpdate":1491279415015,"template":"<div class=\"table-responsive\">\n    <table bonitable\n           sort-options=\"ctrl.sortOptions\"\n           on-sort=\"ctrl.sortHandler()\"\n           class=\"table table-striped\" ng-class=\"{'table-hover': ctrl.isSelectable()}\">\n        <thead>\n            <tr>\n                <th ng-repeat=\"header in properties.headers\">\n                    <div ng-if=\"ctrl.isColumnSortable($index)\" bo-sorter=\"{{properties.columnsKey[$index]}}\">\n                            {{ header | uiTranslate }}\n                    </div>\n                    <div ng-if=\"!ctrl.isColumnSortable($index)\">\n                        {{ header | uiTranslate }}\n                    </div>\n                </th>\n            </tr>\n        </thead>\n        <tbody ng-if=\"ctrl.hasMultiColumns()\">\n        <tr ng-repeat=\"row in ctrl.results\" ng-click=\"ctrl.selectRowHandler(row)\"\n            ng-class=\"{'info': row === properties.selectedRow}\">\n            <td ng-repeat=\"column in properties.columnsKey track by $index\">\n                {{ $eval(column, row) | uiTranslate }}\n            </td>\n        </tr>\n        </tbody>\n        <tbody ng-if=\"!ctrl.hasMultiColumns()\">\n        <tr ng-repeat=\"row in ctrl.results\" ng-click=\"ctrl.selectRowHandler(row)\"\n            ng-class=\"{'info': row === properties.selectedRow}\">\n            <td> {{ row | uiTranslate }}</td>\n        </tr>\n        </tbody>\n    </table>\n    <pagination ng-if=\"ctrl.pagination.total > properties.pageSize\" total-items=\"ctrl.pagination.total\" items-per-page=\"properties.pageSize\" direction-links=\"false\" boundary-links=\"false\"\n                ng-model=\"ctrl.pagination.currentPage\" ng-change=\"ctrl.paginationHandler()\"></pagination>\n</div>\n","icon":"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><g><path fill='#868695' d='M36,15v2h11v-2H36z M40,10v2h7v-2H40z M11,10v2h14v-2H11z M3,10v2h3v-2H3z M11,15v2h17v-2H11z M3,15v2h3 v-2H3z'/><path fill='#424251' d='M1,19V1h48v18H1z M0,0v20h50V0H0z'/><path fill='#A7A8B7' d='M1,7v1h7v11h1V8h22v11h1V8h17V7H32V1h-1v6H9V1H8v6H1z'/><path fill='none' stroke='#424251' d='M35,3h12v2H35V3z M11,3h13v2H11V3z M3,3h3v2H3V3z'/></g></svg>","controller":"function PbDataTableCtrl($scope, $http, $log, $filter) {\n\n  var vm = this;\n\n  Object.defineProperty(vm, 'jsonData', {\n    'get': function () {\n      //undefined for filter expression allows to bypass the null value issue that\n      //filters everything\n      var data = $filter('filter')(this.data || [], $scope.properties.filter || undefined);\n      return $filter('orderBy')(data, vm.sortOptions.property, vm.sortOptions.direction);\n    },\n    'set': function (data) {\n      this.data = data;\n    }\n  });\n\n  this.sortOptions = {\n    property: ($scope.properties.sortColumns || [])[0],\n    direction: false\n  };\n\n  this.pagination = {\n    currentPage: 1,\n    total: 0\n  };\n\n  /**\n   * helper methods\n   */\n  this.hasMultiColumns = function () {\n    return Array.isArray($scope.properties.columnsKey);\n  };\n\n  this.isSelectable = function () {\n    return $scope.properties.isBound('selectedRow');\n  };\n\n  /**\n   * Create a request object following $http(request)\n   * @return {Object} a request Object\n   */\n  this.createRequest = function () {\n    var params = {\n      c: $scope.properties.pageSize,\n      p: this.pagination.currentPage - 1 || 0,\n      s: $scope.properties.filter\n    };\n\n    if (this.sortOptions.property) {\n      params.o = this.sortOptions.property + ' ' + (this.sortOptions.direction ? 'DESC' : 'ASC');\n    }\n    return {\n      url: this.removeHandledParams($scope.properties.apiUrl),\n      transformResponse: $http.defaults.transformResponse.concat(transformResponse),\n      params: angular.extend({}, $scope.properties.params || {}, params)\n    };\n  };\n\n  this.removeHandledParams = function(url) {\n    return ['c', 'p'].reduce(\n      function(acc, param) {\n        //we cannot use pbDataTable because the widget build (probably mustache) replace it\n        // with the widget name...\n        return acc.replace(new RegExp('(&' + param + '=[^&#]*([&#])?)', 'g'), '$2').replace(new RegExp('[?]' + param + '=[^&#]*&?', 'g'), '?');\n      },\n      url || '');\n  };\n\n  /**\n   *  Fire request and update results and pagination\n   */\n  this.updateResultsFromAPI = function () {\n    if($scope.properties.apiUrl) {\n      $http(vm.createRequest())\n        .then(function (response) {\n          vm.results = response.data.results;\n          vm.pagination = response.data.pagination;\n        })\n        .catch(function (error) {\n          $log.error(error);\n        });\n    }\n  };\n\n  this.updateResultsFromJson = function () {\n    var start = (vm.pagination.currentPage - 1) * $scope.properties.pageSize;\n    var end = vm.pagination.currentPage * $scope.properties.pageSize;\n    vm.results = vm.jsonData.slice(start, end);\n  };\n\n\n  this.sortHandler = function () {\n    this.updateResults();\n  };\n\n  this.paginationHandler = function () {\n    this.updateResults();\n  };\n\n  this.selectRowHandler = function (row) {\n    if (this.isSelectable()) {\n      $scope.properties.selectedRow = row;\n    }\n  };\n\n  this.isColumnSortable = function(index) {\n    return $scope.properties.type === 'Variable' ||\n      (angular.isArray($scope.properties.sortColumns) &&\n        $scope.properties.sortColumns.indexOf($scope.properties.columnsKey[index]) > -1);\n  };\n\n  function transformResponse(data, header) {\n    return {\n      results: data,\n      pagination: parseContentRange(header('Content-Range'))\n    };\n  }\n\n  /**\n   * helper method which extract pagination data from Content-range HTTP header\n   * @param  {String} strContentRange Content-Range value\n   * @return {Object}                 object containing pagination\n   */\n  function parseContentRange(strContentRange) {\n    if (strContentRange === null) {\n      return {};\n    }\n    var arrayContentRange = strContentRange.split('/');\n    var arrayIndexNumPerPage = arrayContentRange[0].split('-');\n    return {\n      total: parseInt(arrayContentRange[1], 10),\n      currentPage: parseInt(arrayIndexNumPerPage[0], 10) + 1\n    };\n  }\n\n  vm.updateResults = function () {\n    if ($scope.properties.type === 'Variable') {\n      vm.updateResultsFromJson();\n    } else {\n      vm.updateResultsFromAPI();\n    }\n  };\n\n  //watchGroup does not support object equality so we use another way to monitor all at once\n  $scope.$watch('[properties.pageSize, properties.apiUrl, properties.filter, properties.params]', resetPaginationAndUpdateResults, true);\n\n  function resetPaginationAndUpdateResults() {\n    vm.pagination = {\n      currentPage: 1,\n      total: vm.jsonData.length\n    };\n    vm.updateResults();\n  }\n\n  $scope.$watchCollection('properties.content', function (data) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    vm.jsonData = data;\n    vm.pagination = {\n      currentPage: 1,\n      total: data.length\n    };\n    vm.updateResults();\n  });\n}\n","description":"Table with pagination and filtering capabilities","custom":false,"order":11,"properties":[{"label":"Headers","name":"headers","caption":"Comma-separated list","help":"If you specify an expression, the result must be an array of strings","type":"collection","defaultValue":["Id","Name","Description","Date"],"bond":"expression"},{"label":"Data source","name":"type","help":"Variable for frontend paging and ordering or Bonita REST API URL for backend paging and ordering","type":"choice","defaultValue":"Bonita API","choiceValues":["Variable","Bonita API"],"bond":"constant"},{"label":"URL","name":"apiUrl","caption":"A Bonita BPM REST API URL","showFor":"properties.type.value === 'Bonita API'","type":"text","defaultValue":"../API/","bond":"expression"},{"label":"API request parameters","name":"params","help":"Additional request parameters added to the query string","showFor":"properties.type.value === 'Bonita API'","type":"text","bond":"expression"},{"label":"Content","name":"content","help":"Array used to populate the table. Can be a list of objects. Use 'Column keys' to refine content","showFor":"properties.type.value === 'Variable'","type":"text","bond":"expression"},{"label":"Columns key","name":"columnsKey","caption":"Comma-separated list","help":"When 'Content' is a list of objects, specifies the attributes to display in the table columns","type":"collection","bond":"expression"},{"label":"Sortable columns","name":"sortColumns","caption":"List from column keys","help":"BDM APIs are not yet sortable. For other APIs, test in the preview or refer to the BonitaBPM documentation 'REST API' pages","showFor":"properties.type.value === 'Bonita API'","type":"collection","bond":"expression"},{"label":"Selected Row","name":"selectedRow","type":"text","bond":"variable"},{"label":"Page size","name":"pageSize","type":"integer","defaultValue":10,"bond":"expression"},{"label":"Filter","name":"filter","help":"Bind to a Variable to filter the table 'Content'","type":"text","bond":"expression"}],"assets":[{"name":"bonita-lib-tpl-0.5.21.js","type":"js","order":0,"external":false},{"name":"bonita-lib-0.5.21.css","type":"css","order":0,"external":false}],"requiredModules":["org.bonitasoft.templates","ui.bootstrap.pagination","template/pagination/pagination.html","org.bonitasoft.bonitable","org.bonitasoft.bonitable.sortable"]}